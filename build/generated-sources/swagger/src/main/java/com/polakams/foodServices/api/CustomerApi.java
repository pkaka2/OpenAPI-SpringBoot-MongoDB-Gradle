/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.polakams.foodServices.api;

import com.polakams.foodServices.api.model.Customer;
import com.polakams.foodServices.api.model.Order;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Customer", description = "the Customer API")
public interface CustomerApi {

    default CustomerApiDelegate getDelegate() {
        return new CustomerApiDelegate() {};
    }

    /**
     * POST /customers : Create a new customer
     * Create a new customer and customer details
     *
     * @param customer  (required)
     * @return Customer created successfully (status code 201)
     *         or Invalid input (status code 400)
     */
    @Operation(
        operationId = "createCustomer",
        summary = "Create a new customer",
        description = "Create a new customer and customer details",
        tags = { "Customer" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Customer created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/customers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Customer> createCustomer(
        @Parameter(name = "Customer", description = "", required = true) @Valid @RequestBody Customer customer
    ) throws Exception {
        return getDelegate().createCustomer(customer);
    }


    /**
     * DELETE /customers/{id} : Delete a customer
     * Deletes a customer by ID
     *
     * @param id The ID of the customer (required)
     * @return Customer deleted successfully (status code 204)
     *         or Invalid input (status code 400)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "deleteCustomer",
        summary = "Delete a customer",
        description = "Deletes a customer by ID",
        tags = { "Customer" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Customer deleted successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "404", description = "Resource not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/customers/{id}"
    )
    
    default ResponseEntity<Void> deleteCustomer(
        @Parameter(name = "id", description = "The ID of the customer", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) throws Exception {
        return getDelegate().deleteCustomer(id);
    }


    /**
     * GET /customers/{id} : Get customer details
     * Returns a single customer with all details
     *
     * @param id The ID of the customer (required)
     * @return successful operation (status code 200)
     *         or Invalid input (status code 400)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getCustomerById",
        summary = "Get customer details",
        description = "Returns a single customer with all details",
        tags = { "Customer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "404", description = "Resource not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customers/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Customer> getCustomerById(
        @Parameter(name = "id", description = "The ID of the customer", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) throws Exception {
        return getDelegate().getCustomerById(id);
    }


    /**
     * GET /customers/{id}/orders : Get all orders for a customer
     * Returns all orders for the specified customer
     *
     * @param id The ID of the customer (required)
     * @return successful operation (status code 200)
     *         or Invalid input (status code 400)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getCustomerOrders",
        summary = "Get all orders for a customer",
        description = "Returns all orders for the specified customer",
        tags = { "Customer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Order.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "404", description = "Resource not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customers/{id}/orders",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Order>> getCustomerOrders(
        @Parameter(name = "id", description = "The ID of the customer", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) throws Exception {
        return getDelegate().getCustomerOrders(id);
    }


    /**
     * GET /customers : Get all customers in a locality
     * Returns all customers in the given locality
     *
     * @param localityId The ID of the locality (required)
     * @return successful operation (status code 200)
     *         or Invalid input (status code 400)
     */
    @Operation(
        operationId = "getCustomersByLocality",
        summary = "Get all customers in a locality",
        description = "Returns all customers in the given locality",
        tags = { "Customer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Customer.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customers",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Customer>> getCustomersByLocality(
        @NotNull @Parameter(name = "localityId", description = "The ID of the locality", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "localityId", required = true) String localityId
    ) throws Exception {
        return getDelegate().getCustomersByLocality(localityId);
    }


    /**
     * PATCH /customers/{id} : Partially update an existing customer
     * Partially update an existing customer and customer details
     *
     * @param id The ID of the customer (required)
     * @param customer  (required)
     * @return Customer updated successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "patchCustomer",
        summary = "Partially update an existing customer",
        description = "Partially update an existing customer and customer details",
        tags = { "Customer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Customer updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "404", description = "Resource not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/customers/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Customer> patchCustomer(
        @Parameter(name = "id", description = "The ID of the customer", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "Customer", description = "", required = true) @Valid @RequestBody Customer customer
    ) throws Exception {
        return getDelegate().patchCustomer(id, customer);
    }


    /**
     * PUT /customers/{id} : Update an existing customer
     * Update an existing customer and customer details
     *
     * @param id The ID of the customer (required)
     * @param customer  (required)
     * @return Customer updated successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "updateCustomer",
        summary = "Update an existing customer",
        description = "Update an existing customer and customer details",
        tags = { "Customer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Customer updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "404", description = "Resource not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/customers/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Customer> updateCustomer(
        @Parameter(name = "id", description = "The ID of the customer", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "Customer", description = "", required = true) @Valid @RequestBody Customer customer
    ) throws Exception {
        return getDelegate().updateCustomer(id, customer);
    }

}
